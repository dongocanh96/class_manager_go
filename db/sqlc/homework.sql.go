// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: homework.sql

package db

import (
	"context"
	"time"
)

const closeHomework = `-- name: CloseHomework :one
UPDATE homeworks
SET is_closed = $2,
    closed_at = $3
WHERE id = $1
RETURNING id, teacher_id, subject, title, file_name, saved_path, is_closed, created_at, updated_at, closed_at
`

type CloseHomeworkParams struct {
	ID       int64     `json:"id"`
	IsClosed bool      `json:"is_closed"`
	ClosedAt time.Time `json:"closed_at"`
}

func (q *Queries) CloseHomework(ctx context.Context, arg CloseHomeworkParams) (Homework, error) {
	row := q.db.QueryRowContext(ctx, closeHomework, arg.ID, arg.IsClosed, arg.ClosedAt)
	var i Homework
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Subject,
		&i.Title,
		&i.FileName,
		&i.SavedPath,
		&i.IsClosed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const createHomework = `-- name: CreateHomework :one
INSERT INTO homeworks (
    teacher_id,
    subject,
    title,
    file_name,
    saved_path
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, teacher_id, subject, title, file_name, saved_path, is_closed, created_at, updated_at, closed_at
`

type CreateHomeworkParams struct {
	TeacherID int64  `json:"teacher_id"`
	Subject   string `json:"subject"`
	Title     string `json:"title"`
	FileName  string `json:"file_name"`
	SavedPath string `json:"saved_path"`
}

func (q *Queries) CreateHomework(ctx context.Context, arg CreateHomeworkParams) (Homework, error) {
	row := q.db.QueryRowContext(ctx, createHomework,
		arg.TeacherID,
		arg.Subject,
		arg.Title,
		arg.FileName,
		arg.SavedPath,
	)
	var i Homework
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Subject,
		&i.Title,
		&i.FileName,
		&i.SavedPath,
		&i.IsClosed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const deleteHomework = `-- name: DeleteHomework :exec
DELETE FROM homeworks
WHERE id = $1
`

func (q *Queries) DeleteHomework(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHomework, id)
	return err
}

const getHomework = `-- name: GetHomework :one
SELECT id, teacher_id, subject, title, file_name, saved_path, is_closed, created_at, updated_at, closed_at FROM homeworks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHomework(ctx context.Context, id int64) (Homework, error) {
	row := q.db.QueryRowContext(ctx, getHomework, id)
	var i Homework
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Subject,
		&i.Title,
		&i.FileName,
		&i.SavedPath,
		&i.IsClosed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const listHomeworks = `-- name: ListHomeworks :many
SELECT id, teacher_id, subject, title, file_name, saved_path, is_closed, created_at, updated_at, closed_at FROM homeworks
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListHomeworksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHomeworks(ctx context.Context, arg ListHomeworksParams) ([]Homework, error) {
	rows, err := q.db.QueryContext(ctx, listHomeworks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Homework{}
	for rows.Next() {
		var i Homework
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Subject,
			&i.Title,
			&i.FileName,
			&i.SavedPath,
			&i.IsClosed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHomeworksBySubject = `-- name: ListHomeworksBySubject :many
SELECT id, teacher_id, subject, title, file_name, saved_path, is_closed, created_at, updated_at, closed_at FROM homeworks
WHERE subject = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListHomeworksBySubjectParams struct {
	Subject string `json:"subject"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListHomeworksBySubject(ctx context.Context, arg ListHomeworksBySubjectParams) ([]Homework, error) {
	rows, err := q.db.QueryContext(ctx, listHomeworksBySubject, arg.Subject, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Homework{}
	for rows.Next() {
		var i Homework
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Subject,
			&i.Title,
			&i.FileName,
			&i.SavedPath,
			&i.IsClosed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHomeworksByTeacher = `-- name: ListHomeworksByTeacher :many
SELECT id, teacher_id, subject, title, file_name, saved_path, is_closed, created_at, updated_at, closed_at FROM homeworks
WHERE teacher_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListHomeworksByTeacherParams struct {
	TeacherID int64 `json:"teacher_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListHomeworksByTeacher(ctx context.Context, arg ListHomeworksByTeacherParams) ([]Homework, error) {
	rows, err := q.db.QueryContext(ctx, listHomeworksByTeacher, arg.TeacherID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Homework{}
	for rows.Next() {
		var i Homework
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Subject,
			&i.Title,
			&i.FileName,
			&i.SavedPath,
			&i.IsClosed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHomework = `-- name: UpdateHomework :one
UPDATE homeworks
SET file_name = $2,
    saved_path = $3,
    updated_at = $4
WHERE id = $1
RETURNING id, teacher_id, subject, title, file_name, saved_path, is_closed, created_at, updated_at, closed_at
`

type UpdateHomeworkParams struct {
	ID        int64     `json:"id"`
	FileName  string    `json:"file_name"`
	SavedPath string    `json:"saved_path"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateHomework(ctx context.Context, arg UpdateHomeworkParams) (Homework, error) {
	row := q.db.QueryRowContext(ctx, updateHomework,
		arg.ID,
		arg.FileName,
		arg.SavedPath,
		arg.UpdatedAt,
	)
	var i Homework
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Subject,
		&i.Title,
		&i.FileName,
		&i.SavedPath,
		&i.IsClosed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}
